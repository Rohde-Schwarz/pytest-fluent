[tox]
minversion = 3.18
envlist = codestyle,docstyle,errors,types,test,coverage
isolated_build = True

[testenv]
install_command = pip install -i {env:PIP_INDEX_URL:https://pypi.org/simple} {opts} {packages}
extras = test
commands =
    test-py3{8,9,10,11}: pytest {posargs:tests}

[testenv:format]
description = Autoformat code.
skip_install = true
envdir = {toxworkdir}/lint
deps =
    black
    isort >= 5.0
commands =
    isort .
    black src/ tests/

[testenv:lint]
description = Check code for stylistic and logical errors.
envdir = {toxworkdir}/lint
deps =
    {[testenv:codestyle]deps}
    {[testenv:docstyle]deps}
    {[testenv:types]deps}
    {[testenv:errors]deps}
commands =
    {[testenv:codestyle]commands}
    {[testenv:docstyle]commands}
    {[testenv:types]commands}
    {[testenv:errors]commands}

[testenv:codestyle]
description = Check code and tests for PEP 8 compliance and code complexity.
skip_install = true
envdir = {toxworkdir}/lint
deps =
    flake8    
    flake8-colors
    isort >= 5.0
commands =
    flake8 --select E,W,C --show-source src/ tests/
    isort --check --diff .

[testenv:docstyle]
description = Check docstrings for PEP 257 compliance (reST style).
skip_install = true
envdir = {toxworkdir}/lint
deps =
    flake8    
    flake8-colors
    flake8-rst-docstrings
commands = flake8 --select RST src/

[testenv:flake]
description = Find errors with static code analysis.
envdir = {toxworkdir}/lint
deps =
    flake8
    flake8-colors
commands =    
    flake8 --select F src/ tests/

[testenv:pylint]
description = Find errors with static code analysis.
envdir = {toxworkdir}/lint
deps =
    pylint
commands =    
    pylint --output-format=colorized --errors-only src/pytest_fluent

[testenv:errors]
description = Find errors with static code analysis.
envdir = {toxworkdir}/lint
deps =
    {[testenv:flake]deps}
    {[testenv:pylint]deps}
commands =
    {[testenv:flake]commands}
    {[testenv:pylint]commands}

[testenv:types]
description = Run static type checker.
skip_install = true
envdir = {toxworkdir}/lint
deps =
    mypy
    types-six
commands =
    mypy --check-untyped-defs --no-implicit-optional src/

[testenv:test]
description = Run tests with pytest.
passenv = CI
extras = test
deps =
    pytest
    pytest-cov
commands =
    pytest --cov --cov-report= {posargs:tests}

[testenv:coverage]
description = Measure and report coverage.
deps =
    coverage[toml]
commands =
    coverage report
    coverage xml
    coverage html --fail-under 50

[testenv:test_with_reports]
description = Run tests with pytest and report coverage.
envdir = {toxworkdir}/test_cov
deps =
    {[testenv:test]deps}
    {[testenv:coverage]deps}
commands =
    {[testenv:test]commands} --junitxml=report.xml
    {[testenv:coverage]commands}

[testenv:clean]
description = Remove all generated and temporary files.
skip_install = true
allowlist_externals =
    git
deps =
    coverage[toml]
commands =
    coverage erase
    git clean -xfd

[testenv:docs]
description = Generate API documentation.
changedir = docs
extras = docs
setenv = 
    WORKSPACE_ROOT_PATH = {toxinidir}
commands =
    {envbindir}/python patch_readme.py
    sphinx-build -W -d {envtmpdir}/doctrees . {envtmpdir}/html

[testenv:version]
description = Increment version number.
skip_install = true
deps = bump2version
commands = bumpversion --verbose --tag --commit {posargs}

[testenv:build]
description = Build package.
allowlist_externals =
    git
deps =
    build[virtualenv]
commands =
    git clean -xfd dist/
    python -m build

[testenv:upload]
description = Upload package
deps = twine
passenv =
    TWINE_USERNAME
    TWINE_PASSWORD
    REPOSITORY_URL
commands = twine upload dist/*

[flake8]
ignore = W503,E203
max-line-length = 88
format = ${cyan}%(path)s${reset}:${yellow_bold}%(row)d${reset}:${green_bold}%(col)d${reset}: ${red_bold}%(code)s${reset} %(text)s

[pydocstyle]
convention = pep257
